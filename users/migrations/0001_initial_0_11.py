# Generated by Django 5.2.5 on 2025-08-10 18:48

import django.core.serializers.json
import django.db.models.deletion
import django.db.models.functions.text
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import users.models.preference
import users.models.user


class Migration(migrations.Migration):
    replaces = [
        ("users", "0001_initial_0_10"),
        ("users", "0002_preference_auto_bookmark_cats"),
        ("users", "0003_remove_preference_no_anonymous_view"),
        ("users", "0004_remove_user_at_least_one_login_method_and_more"),
        ("users", "0005_remove_follow_owner_remove_follow_target_and_more"),
        ("users", "0006_alter_task_type"),
        ("users", "0007_alter_task_type"),
        ("users", "0008_alter_task_type"),
    ]

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("takahe", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        default=None,
                        max_length=254,
                        null=True,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 50 characters or fewer. Letters, digits and _ only.",
                        max_length=100,
                        null=True,
                        unique=True,
                        validators=[users.models.user.UsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("following", models.JSONField(default=list)),
                (
                    "mastodon_id",
                    models.CharField(default=None, max_length=100, null=True),
                ),
                (
                    "mastodon_site",
                    models.CharField(default=None, max_length=100, null=True),
                ),
                ("mastodon_token", models.CharField(default="", max_length=2048)),
                (
                    "mastodon_refresh_token",
                    models.CharField(default="", max_length=2048),
                ),
                ("mastodon_locked", models.BooleanField(default=False)),
                ("mastodon_followers", models.JSONField(default=list)),
                ("mastodon_following", models.JSONField(default=list)),
                ("mastodon_mutes", models.JSONField(default=list)),
                ("mastodon_blocks", models.JSONField(default=list)),
                ("mastodon_domain_blocks", models.JSONField(default=list)),
                ("mastodon_account", models.JSONField(default=dict)),
                (
                    "mastodon_last_refresh",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("read_announcement_index", models.PositiveIntegerField(default=0)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
                (
                    "mastodon_username",
                    models.CharField(default=None, max_length=100, null=True),
                ),
                (
                    "pending_email",
                    models.EmailField(
                        default=None,
                        max_length=254,
                        null=True,
                        verbose_name="email address pending verification",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Preference",
            fields=[
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        serialize=False,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("profile_layout", models.JSONField(blank=True, default=list)),
                (
                    "export_status",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                (
                    "import_status",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        encoder=django.core.serializers.json.DjangoJSONEncoder,
                        null=True,
                    ),
                ),
                ("default_visibility", models.PositiveSmallIntegerField(default=0)),
                ("classic_homepage", models.PositiveSmallIntegerField(default=0)),
                ("mastodon_publish_public", models.BooleanField(default=False)),
                ("mastodon_append_tag", models.CharField(default="", max_length=2048)),
                ("show_last_edit", models.PositiveSmallIntegerField(default=0)),
                ("no_anonymous_view", models.PositiveSmallIntegerField(default=0)),
                ("default_no_share", models.BooleanField(default=False)),
                ("discover_layout", models.JSONField(blank=True, default=list)),
            ],
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.CheckConstraint(
                condition=models.Q(
                    ("is_active", False),
                    ("mastodon_username__isnull", False),
                    ("email__isnull", False),
                    _connector="OR",
                ),
                name="at_least_one_login_method",
            ),
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("email"), name="unique_email"
            ),
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("username"),
                name="unique_username",
            ),
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("mastodon_username"),
                django.db.models.functions.text.Lower("mastodon_site"),
                name="unique_mastodon_username",
            ),
        ),
        migrations.AddConstraint(
            model_name="user",
            constraint=models.UniqueConstraint(
                django.db.models.functions.text.Lower("mastodon_id"),
                django.db.models.functions.text.Lower("mastodon_site"),
                name="unique_mastodon_id",
            ),
        ),
        migrations.CreateModel(
            name="Follow",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_time", models.DateTimeField(auto_now_add=True)),
                ("edited_time", models.DateTimeField(auto_now=True)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="user",
            name="local_following",
            field=models.ManyToManyField(
                related_name="local_followers",
                through="users.Follow",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="muting",
            field=models.JSONField(default=list),
        ),
        migrations.AddField(
            model_name="user",
            name="rejecting",
            field=models.JSONField(default=list),
        ),
        migrations.CreateModel(
            name="Mute",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_time", models.DateTimeField(auto_now_add=True)),
                ("edited_time", models.DateTimeField(auto_now=True)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Block",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_time", models.DateTimeField(auto_now_add=True)),
                ("edited_time", models.DateTimeField(auto_now=True)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="user",
            name="local_blocking",
            field=models.ManyToManyField(
                related_name="local_blocked_by",
                through="users.Block",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="local_muting",
            field=models.ManyToManyField(
                related_name="+", through="users.Mute", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="preference",
            name="hidden_categories",
            field=models.JSONField(default=list),
        ),
        migrations.AddField(
            model_name="user",
            name="mastodon_last_reachable",
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.CreateModel(
            name="APIdentity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("local", models.BooleanField()),
                ("username", models.CharField(blank=True, max_length=500, null=True)),
                (
                    "domain_name",
                    models.CharField(blank=True, max_length=500, null=True),
                ),
                ("deleted", models.DateTimeField(blank=True, null=True)),
                (
                    "user",
                    models.OneToOneField(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="identity",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["local", "username"],
                        name="users_apide_local_2d8170_idx",
                    ),
                    models.Index(
                        fields=["domain_name", "username"],
                        name="users_apide_domain__53ffa5_idx",
                    ),
                ],
            },
        ),
        migrations.AddField(
            model_name="preference",
            name="mastodon_skip_relationship",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="preference",
            name="mastodon_skip_userinfo",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="preference",
            name="mastodon_repost_mode",
            field=models.PositiveSmallIntegerField(default=0),
        ),
        migrations.AddField(
            model_name="preference",
            name="post_public_mode",
            field=models.PositiveSmallIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name="preference",
            name="show_last_edit",
            field=models.PositiveSmallIntegerField(default=1),
        ),
        migrations.RemoveField(
            model_name="preference",
            name="mastodon_publish_public",
        ),
        migrations.AddField(
            model_name="preference",
            name="mastodon_default_repost",
            field=models.BooleanField(default=True),
        ),
        migrations.RemoveField(
            model_name="preference",
            name="default_no_share",
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["mastodon_site", "mastodon_username"],
                name="users_user_mastodo_bd2db5_idx",
            ),
        ),
        migrations.AddField(
            model_name="apidentity",
            name="anonymous_viewable",
            field=models.BooleanField(default=True),
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("type", models.CharField(max_length=20)),
                (
                    "state",
                    models.IntegerField(
                        choices=[
                            (0, "Pending"),
                            (1, "Started"),
                            (2, "Complete"),
                            (3, "Failed"),
                        ],
                        default=0,
                    ),
                ),
                ("metadata", models.JSONField(default=dict)),
                ("message", models.TextField(default="")),
                ("created_time", models.DateTimeField(auto_now_add=True)),
                ("edited_time", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "indexes": [
                    models.Index(
                        fields=["user", "type"], name="users_task_user_id_e29f34_idx"
                    )
                ],
            },
        ),
        migrations.AddField(
            model_name="user",
            name="language",
            field=models.CharField(
                choices=[
                    ("en", "English"),
                    ("da", "Danish"),
                    ("de", "German"),
                    ("fr", "French"),
                    ("it", "Italian"),
                    ("pt", "Portuguese"),
                    ("pt-br", "Brazilian Portuguese"),
                    ("zh-hans", "Simplified Chinese"),
                    ("zh-hant", "Traditional Chinese"),
                ],
                default="en",
                max_length=10,
                verbose_name="language",
            ),
        ),
        migrations.AddField(
            model_name="preference",
            name="auto_bookmark_cats",
            field=models.JSONField(default=users.models.preference._default_book_cats),
        ),
        migrations.RemoveField(
            model_name="preference",
            name="no_anonymous_view",
        ),
        migrations.RemoveConstraint(
            model_name="user",
            name="at_least_one_login_method",
        ),
        migrations.RemoveConstraint(
            model_name="user",
            name="unique_email",
        ),
        migrations.RemoveConstraint(
            model_name="user",
            name="unique_mastodon_username",
        ),
        migrations.RemoveConstraint(
            model_name="user",
            name="unique_mastodon_id",
        ),
        migrations.RemoveIndex(
            model_name="user",
            name="users_user_mastodo_bd2db5_idx",
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(models.F("is_active"), name="index_user_is_active"),
        ),
        migrations.AlterField(
            model_name="user",
            name="username",
            field=models.CharField(
                default="",
                error_messages={"unique": "A user with that username already exists."},
                help_text="Required. 50 characters or fewer. Letters, digits and _ only.",
                max_length=100,
                unique=True,
                validators=[users.models.user.UsernameValidator()],
                verbose_name="username",
            ),
            preserve_default=False,
        ),
        migrations.RemoveField(
            model_name="follow",
            name="owner",
        ),
        migrations.RemoveField(
            model_name="follow",
            name="target",
        ),
        migrations.RemoveField(
            model_name="mute",
            name="owner",
        ),
        migrations.RemoveField(
            model_name="mute",
            name="target",
        ),
        migrations.RemoveField(
            model_name="user",
            name="following",
        ),
        migrations.RemoveField(
            model_name="user",
            name="local_blocking",
        ),
        migrations.RemoveField(
            model_name="user",
            name="local_following",
        ),
        migrations.RemoveField(
            model_name="user",
            name="local_muting",
        ),
        migrations.RemoveField(
            model_name="user",
            name="mastodon_account",
        ),
        migrations.RemoveField(
            model_name="user",
            name="mastodon_blocks",
        ),
        migrations.RemoveField(
            model_name="user",
            name="mastodon_domain_blocks",
        ),
        migrations.RemoveField(
            model_name="user",
            name="mastodon_followers",
        ),
        migrations.RemoveField(
            model_name="user",
            name="mastodon_following",
        ),
        migrations.RemoveField(
            model_name="user",
            name="mastodon_id",
        ),
        migrations.RemoveField(
            model_name="user",
            name="mastodon_last_reachable",
        ),
        migrations.RemoveField(
            model_name="user",
            name="mastodon_last_refresh",
        ),
        migrations.RemoveField(
            model_name="user",
            name="mastodon_locked",
        ),
        migrations.RemoveField(
            model_name="user",
            name="mastodon_mutes",
        ),
        migrations.RemoveField(
            model_name="user",
            name="mastodon_refresh_token",
        ),
        migrations.RemoveField(
            model_name="user",
            name="mastodon_site",
        ),
        migrations.RemoveField(
            model_name="user",
            name="mastodon_token",
        ),
        migrations.RemoveField(
            model_name="user",
            name="mastodon_username",
        ),
        migrations.RemoveField(
            model_name="user",
            name="muting",
        ),
        migrations.RemoveField(
            model_name="user",
            name="pending_email",
        ),
        migrations.RemoveField(
            model_name="user",
            name="read_announcement_index",
        ),
        migrations.RemoveField(
            model_name="user",
            name="rejecting",
        ),
        migrations.AlterField(
            model_name="user",
            name="email",
            field=models.EmailField(
                blank=True, default="", max_length=254, verbose_name="email address"
            ),
            preserve_default=False,
        ),
        migrations.DeleteModel(
            name="Block",
        ),
        migrations.DeleteModel(
            name="Follow",
        ),
        migrations.DeleteModel(
            name="Mute",
        ),
        migrations.AlterField(
            model_name="task",
            name="type",
            field=models.CharField(
                choices=[
                    ("journal.doubanimporter", "douban importer"),
                    ("journal.doufenexporter", "doufen exporter"),
                    ("journal.goodreadsimporter", "goodreads importer"),
                    ("journal.letterboxdimporter", "letterboxd importer"),
                ],
                db_index=True,
                max_length=255,
            ),
        ),
        migrations.RunSQL(
            sql="UPDATE users_task SET type='journal.letterboxdimporter' WHERE type='import.letterboxd'",
        ),
        migrations.AlterField(
            model_name="task",
            name="type",
            field=models.CharField(
                choices=[
                    ("journal.baseimporter", "base importer"),
                    ("journal.csvexporter", "csv exporter"),
                    ("journal.csvimporter", "csv importer"),
                    ("journal.doubanimporter", "douban importer"),
                    ("journal.doufenexporter", "doufen exporter"),
                    ("journal.goodreadsimporter", "goodreads importer"),
                    ("journal.letterboxdimporter", "letterboxd importer"),
                    ("journal.ndjsonexporter", "ndjson exporter"),
                    ("journal.ndjsonimporter", "ndjson importer"),
                    ("journal.opmlimporter", "opml importer"),
                    ("journal.steamimporter", "steam importer"),
                ],
                db_index=True,
                max_length=255,
            ),
        ),
    ]
